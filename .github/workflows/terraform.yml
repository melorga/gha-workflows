---
name: Terraform CI/CD

on:
  workflow_call:
    inputs:
      terraform_version:
        description: 'Terraform version to use'
        required: false
        type: string
        default: '1.8.5'
      working_directory:
        description: 'Working directory for Terraform'
        required: false
        type: string
        default: '.'
      environment:
        description: 'Environment to deploy to'
        required: false
        type: string
        default: 'dev'
      auto_apply:
        description: 'Auto apply changes on main branch'
        required: false
        type: boolean
        default: false
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: false

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Terraform Format Check
        working-directory: ${{ inputs.working_directory }}
        run: terraform fmt -check

      - name: Terraform Init
        working-directory: ${{ inputs.working_directory }}
        run: terraform init

      - name: Terraform Validate
        working-directory: ${{ inputs.working_directory }}
        run: terraform validate

      - name: Setup tflint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: Run tflint
        working-directory: ${{ inputs.working_directory }}
        run: |
          tflint --init
          tflint

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: ${{ inputs.working_directory }}
          soft_fail: false

  plan:
    name: Plan
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Terraform Init
        working-directory: ${{ inputs.working_directory }}
        run: terraform init

      - name: Terraform Plan
        working-directory: ${{ inputs.working_directory }}
        run: |
          terraform plan -no-color -out=tfplan
          terraform show -no-color tfplan > plan.txt

      - name: Comment Plan
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const planPath = path.join(
              '${{ inputs.working_directory }}', 
              'plan.txt'
            );
            const plan = fs.readFileSync(planPath, 'utf8');
            
            const output = `#### Terraform Plan ðŸ“–
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${plan}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, 
            Action: \`${{ github.event_name }}\`, 
            Working Directory: \`${{ inputs.working_directory }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  apply:
    name: Apply
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Terraform Init
        working-directory: ${{ inputs.working_directory }}
        run: terraform init

      - name: Terraform Plan
        working-directory: ${{ inputs.working_directory }}
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ${{ inputs.working_directory }}
        if: ${{ inputs.auto_apply }}
        run: terraform apply tfplan

  test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Download Go modules
        working-directory: ${{ inputs.working_directory }}
        run: go mod download

      - name: Run tests
        working-directory: ${{ inputs.working_directory }}
        run: go test -v -timeout 45m ./tests/...
